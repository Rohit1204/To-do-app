{"version":3,"sources":["components/TodoItems/TodoItems.jsx","components/Footer/footer.component.jsx","components/Navbar/navbar.component.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","createTasks","bind","key","this","delete","item","text","type","onClick","listItems","entries","map","className","duration","easing","Component","Footer","style","animationDelay","href","target","rel","color","Navbar","darkMode","setDarkMode","useState","expand","setExpand","useLocalStorage","setIsThemeSet","useLockBodyScroll","prevMode","to","App","items","setItems","_inputElement","useRef","isThemeSet","useEffectOnce","window","matchMedia","matches","React","useEffect","document","querySelector","classList","add","remove","onSubmit","e","preventDefault","value","newItem","Date","now","concat","console","log","ref","a","placeholder","filteredItems","filter","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.15bcb141.chunk.js","sourcesContent":["import React, { Component} from 'react';\r\nimport FlipMove from 'react-flip-move';\r\nimport './TodoItems.css';\r\nclass TodoItems extends Component{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.createTasks=this.createTasks.bind(this);\r\n  }\r\n  delete(key){\r\n    this.props.delete(key);\r\n     }\r\n  createTasks(item){\r\n    return (\r\n          <li key={item.key}>{item.text}\r\n          <button type=\"button\" onClick={()=> this.delete(item.key)}>X</button>\r\n    </li>\r\n    \r\n   \r\n    );\r\n  }\r\n \r\n  render(){\r\n    var todoEntries =this.props.entries;\r\n    var listItems=todoEntries.map(this.createTasks);\r\n    return(\r\n      <ul className=\"theList\">\r\n        <FlipMove duration={250} easing=\"ease-out\">\r\n        {listItems}\r\n        </FlipMove>\r\n      </ul>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nexport default TodoItems;","import React from 'react';\r\nimport './footer.style.css';\r\nimport * as Icon from 'react-feather';\r\n\r\nexport const Footer =()=>{\r\n    return(\r\n        <footer className=\"fadeInUp\" style={{animationDelay:'2s'}}>\r\n            <div className=\"link\">\r\n            <a href='https://github.com/rohit1204/todo-list' target='__blank' rel=\"noopener noreferrer\">To-Do List</a>   \r\n            </div>\r\n            <a href='https://github.com/rohit1204' target='__blank' className='github'><Icon.GitHub color={\"#000000\"}/> </a>\r\n            <a href='https://instagram.com/rohit.ahuja04' target='__blank' className='github'><Icon.Instagram  color={\"#fb5581\"}/></a>\r\n        </footer>\r\n    )\r\n}","import React ,{useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport \"./navbar.style.css\";\r\nimport {\r\n    useLockBodyScroll, useLocalStorage,\r\n} from 'react-use';\r\nimport * as Icon from 'react-feather';\r\n\r\nexport function Navbar({darkMode,setDarkMode}){\r\n    const [expand,setExpand]=useState(false);\r\n    const [isThemeSet,setIsThemeSet]=useLocalStorage('isThemeSet',false);\r\n      useLockBodyScroll(expand);\r\n    return(\r\n        <div className=\"navbar\">\r\n            <div className=\"navbar-left\"\r\n            onClick={()=>{\r\n                setDarkMode((prevMode)=>!prevMode);\r\n                setIsThemeSet(true);\r\n            }}\r\n            >\r\n                {darkMode ?<Icon.Sun color={'#ffc107'}/>:<Icon.Moon/>}\r\n            </div>\r\n             <div className=\"navbar-middle\">\r\n                 <Link\r\n                 to=\"/\"\r\n                 onClick={()=>{\r\n                     setExpand(false);\r\n                 }}\r\n                 >\r\n                To-Do <span>List</span>\r\n                 </Link>\r\n             </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Navbar;","import React, { useState, useRef } from 'react';\nimport TodoItems from './components/TodoItems/TodoItems';\nimport './App.scss';\nimport  {Footer} from './components/Footer/footer.component';\nimport Navbar from './components/Navbar/navbar.component';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {useLocalStorage, useEffectOnce} from 'react-use';\nexport function App(props){\n  const[items,setItems]=useState([]);\n  var _inputElement =useRef(\"\");\n\n  const addItem=(e)=>{\n    e.preventDefault();\n    if(_inputElement.value !==\" \"){\n      var newItem ={\n        text: _inputElement.value,\n        key:Date.now()\n      };\n          setItems(items=> items.concat(newItem)\n      );\n      _inputElement.value=\" \";\n    }\n  console.log(setItems);\n  }\n  const deleteItem=(key)=>{\n    var filteredItems= items.filter(function(item){\n      return (item.key !==key);\n    });\n   setItems(filteredItems);\n  }\n  const [darkMode, setDarkMode]=useLocalStorage('darkMode',false);\n  const [isThemeSet]=useLocalStorage('isThemeSet',false);\n  useEffectOnce(()=>{\n    if(\n      window.matchMedia &&\n      window.matchMedia('(prefers-color-scheme:dark)').matches && !isThemeSet){\n        setDarkMode(true);\n      }else if(\n  window.matchMedia && !window.matchMedia('(prefers-color-scheme:dark)').matches && !isThemeSet)\n  {\n    setDarkMode(false);\n  }\n  });\n  React.useEffect(()=>{\n    if(darkMode){\n      document.querySelector('body').classList.add('dark-mode');\n    }\n    else{\n      document.querySelector('body').classList.remove('dark-mode');\n    }\n  },[darkMode]);\n  return(\n    <div className=\"todoListMain\">\n      <Router>\n      <Navbar\n      darkMode={darkMode}\n      setDarkMode={setDarkMode}\n      />\n      <div className=\"header\">\n        <form onSubmit ={addItem}>\n      <input \n      ref={(a) =>  _inputElement =a}\n      placeholder=\"enter task\"\n      className=\"no-outline\">\n      </input>\n      <button type=\"submit\">add</button>\n        </form>\n      </div>\n      <div className=\"list\">\n      <TodoItems entries= {items}\n                  delete={deleteItem}/>\n      </div>\n      \n      <Footer/>\n      </Router>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}